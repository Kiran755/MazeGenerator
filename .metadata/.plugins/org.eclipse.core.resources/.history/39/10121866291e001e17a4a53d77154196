package mazeGenerator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import javax.swing.JPanel;




public class generate extends JPanel {
	
	public int rows = 10;
	public int cols = 10;
	public int blockSize = 50;
	
	Cell[][] graph = new Cell[10][10];
	
	
	public generate() {
		this.setPreferredSize(new Dimension(rows*blockSize + blockSize,cols*blockSize + blockSize));
		this.setBackground(Color.white);
		
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].length;j++) {
				Cell c = new Cell(i,j);
				graph[i][j] = c;
			}
		}
	}
	
	
	public void paintComponent(Graphics g) {
		
		
		
		Graphics2D g2d = (Graphics2D) g;
		
		
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].length;j++) {
				
				
				Line2D lin = new Line2D.Float(graph[i][j].getLeft()[0],graph[i][j].getLeft()[1],graph[i][j].getLeft()[2],graph[i][j].getLeft()[3]);			
				Line2D lin2 = new Line2D.Float(graph[i][j].getRight()[0],graph[i][j].getRight()[1],graph[i][j].getRight()[2],graph[i][j].getRight()[3]);
				Line2D lin3 = new Line2D.Float(graph[i][j].getBottom()[0],graph[i][j].getBottom()[1],graph[i][j].getBottom()[2],graph[i][j].getBottom()[3]);
				Line2D lin4 = new Line2D.Float(graph[i][j].getTop()[0],graph[i][j].getTop()[1],graph[i][j].getTop()[2],graph[i][j].getTop()[3]);
				
				
				//Check and draw only if the specified walls are true;
				//top
				if(graph[i][j].walls[0]) {
					g2d.draw(lin4);					
				}
				
				//right
				if(graph[i][j].walls[1]) {
					
					g2d.draw(lin2);
				}
				
				//bottom
				if(graph[i][j].walls[2]) {
					g2d.draw(lin3);					
				}
				
				//left
				if(graph[i][j].walls[3]) {
					g2d.draw(lin4);					
				}
				
				
			}
		}
		
		
		
		
		
		
		
		
	
		
		
		

		
//		for(int i=0;i<rows;i++) {
//			for(int j=0;j<cols;j++) {
//				g2d.setColor((i+j)%2==0?new Color(255,255,255):new Color(157,105,53));
//				g2d.drawRect(i*blockSize, j*blockSize, blockSize, blockSize);
//				g2d.fillRect(i*blockSize, j*blockSize, blockSize,blockSize);
//			}
//		}
		
	}
}
