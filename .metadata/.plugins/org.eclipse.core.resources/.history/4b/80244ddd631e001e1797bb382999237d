package mazeGenerator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import javax.swing.JPanel;
import java.util.*;



public class generate extends JPanel {
	
	public int rows = 10;
	public int cols = 10;
	public int blockSize = 50;
	public static int count = 0;
	
	Cell[][] graph = new Cell[10][10];
	Stack<Cell> st = new Stack<Cell>();
	
	
	
	public generate() {
		this.setPreferredSize(new Dimension(rows*blockSize + blockSize,cols*blockSize + blockSize));
		this.setBackground(Color.white);
		
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].length;j++) {
				Cell c = new Cell(i,j);
				graph[i][j] = c;
				
//				System.out.println("For node " + i +" " + j + " adjacent values are : ");
				for(int k=0;k<graph[i][j].adjacentCells.size();k++) {
					int row = graph[i][j].adjacentCells.get(k).get(0);
					int col = graph[i][j].adjacentCells.get(k).get(1);
					
//					System.out.println("row : " + row + " " + "col : " + col);
				}
			}
		}
		
		createMaze(graph,0,0,null);
	}
	
	
	public boolean isSame(int[] one,int[] two) {
		
		if(one[0] == two[0] && one[1]==two[1] && one[2]==two[2] && one[3]==two[3])
			return true;
		
		return false;
	}
	
	
	
	public void createMaze(Cell[][] graph,int row,int col,Cell neighbour) {
		
		long m=0;
//		while(m<10000000000L) m++;
		System.out.println("hello");
//		try {
//			Thread.sleep(1000);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		this.repaint();
		this.revalidate();
		if(!graph[row][col].visited)
		{
			graph[row][col].visited = true;
			Random random = new Random();
			int min=0;
			int max = graph[row][col].adjacentCells.size()-1;
			
			
			//randomly shuffle the neighbours 
			Collections.shuffle(graph[row][col].adjacentCells);
			for(int i=0;i<graph[row][col].adjacentCells.size();i++)
			{
				int nextRow = graph[row][col].adjacentCells.get(i).get(0); // get row
				int nextCol = graph[row][col].adjacentCells.get(i).get(1); // get col
				
				if(!graph[nextRow][nextCol].visited) {
					boolean match = isSame(graph[row][col].getLeft(),graph[nextRow][nextCol].getRight());
					boolean match2 = isSame(graph[row][col].getTop(),graph[nextRow][nextCol].getBottom());
					boolean match3 = isSame(graph[row][col].getRight(),graph[nextRow][nextCol].getLeft());
					boolean match4 = isSame(graph[row][col].getBottom(),graph[nextRow][nextCol].getTop());
					if(match) {
						graph[row][col].walls[3] = false;
						graph[nextRow][nextCol].walls[1] = false;
						System.out.println("This is matching : " + row + " " + col + " with " + nextRow + " " + nextCol);
					}
					if(match2) {
						graph[row][col].walls[0] = false;
						graph[nextRow][nextCol].walls[2] = false;
					}
					if(match3) {
						graph[row][col].walls[1] = false;
						graph[nextRow][nextCol].walls[3] = false;
					}
					if(match4){
						graph[row][col].walls[3] = false;
						graph[nextRow][nextCol].walls[0] = false;
					}
					
					
					createMaze(graph,nextRow,nextCol,graph[row][col]);
					
				
					
				}
				
			}
			
		}
		
		
	}
	
	
	public void paintComponent(Graphics g) {
		
		
		
		Graphics2D g2d = (Graphics2D) g;
		
		
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].length;j++) {
				
				
				Line2D lin = new Line2D.Float(graph[i][j].getLeft()[0],graph[i][j].getLeft()[1],graph[i][j].getLeft()[2],graph[i][j].getLeft()[3]);			
				Line2D lin2 = new Line2D.Float(graph[i][j].getRight()[0],graph[i][j].getRight()[1],graph[i][j].getRight()[2],graph[i][j].getRight()[3]);
				Line2D lin3 = new Line2D.Float(graph[i][j].getBottom()[0],graph[i][j].getBottom()[1],graph[i][j].getBottom()[2],graph[i][j].getBottom()[3]);
				Line2D lin4 = new Line2D.Float(graph[i][j].getTop()[0],graph[i][j].getTop()[1],graph[i][j].getTop()[2],graph[i][j].getTop()[3]);
				
				
				//Check and draw only if the specified walls are true;
				//top
				if(graph[i][j].walls[0]) {
					g2d.draw(lin4);					
				}
				
				//right
				if(graph[i][j].walls[1]) {
					
					g2d.draw(lin2);
				}
				
				//bottom
				if(graph[i][j].walls[2]) {
					g2d.draw(lin3);					
				}
				
				//left
				if(graph[i][j].walls[3]) {
					g2d.draw(lin);					
				}
				
				
			}
		}
		
		
		
		
		
		
		
		
	
		
		
		

		
//		for(int i=0;i<rows;i++) {
//			for(int j=0;j<cols;j++) {
//				g2d.setColor((i+j)%2==0?new Color(255,255,255):new Color(157,105,53));
//				g2d.drawRect(i*blockSize, j*blockSize, blockSize, blockSize);
//				g2d.fillRect(i*blockSize, j*blockSize, blockSize,blockSize);
//			}
//		}
		
	}
}
